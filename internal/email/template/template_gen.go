// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package template generated by go-bindata.// sources:
// ../../../conf/email/register.tmpl
// ../../../conf/email/validator.tmpl
package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confEmailRegisterTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc9\xb7\x52\xa8\xae\xd6\x0b\xc9\xaf\xad\xe5\x0a\x2e\x4d\xca\x4a\x4d\x2e\xb1\x52\x78\xb2\x77\xc1\xd3\xed\x9b\x9e\x75\x4c\x78\xda\x35\xff\xd9\xe6\x15\x4f\xdb\x7a\x40\x6a\x1c\x0b\x0a\xfc\x12\x73\x53\x6b\x6b\x15\x5e\x6c\x59\xf6\xb4\x7f\x3b\x17\xd7\xb3\x35\x8b\x5e\xec\xef\x03\xc9\x85\x16\xa7\x16\xe5\x81\x25\xdf\xef\xe9\x21\x52\x3b\x20\x00\x00\xff\xff\x5f\x37\x8d\xbd\x7b\x00\x00\x00"

func confEmailRegisterTmplBytes() ([]byte, error) {
	return bindataRead(
		_confEmailRegisterTmpl,
		"conf/email/register.tmpl",
	)
}

func confEmailRegisterTmpl() (*asset, error) {
	bytes, err := confEmailRegisterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/email/register.tmpl", size: 123, mode: os.FileMode(420), modTime: time.Unix(1608539178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confEmailValidatorTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc9\xb7\x52\xa8\xae\xd6\x0b\xc9\xaf\xad\xe5\x0a\x2e\x4d\xca\x4a\x4d\x2e\xb1\x52\x78\xb2\x77\xc1\xb3\xb5\x8b\x9f\xce\x59\xf1\x6c\xf3\x8a\xa7\x6d\x3d\x20\x05\x8e\x05\x05\x7e\x89\xb9\xa9\xb5\xb5\x0a\x2f\xb6\x2c\x7b\xda\xbf\x9d\x8b\x8b\x08\x45\xef\xf7\xf4\xbc\x5c\xd5\xf3\x62\x7d\xe3\xf3\x05\x8d\x4f\x76\xec\x02\x29\x71\xce\x4f\x49\xad\xad\xe5\x02\x04\x00\x00\xff\xff\xc9\xff\x5f\x45\x77\x00\x00\x00"

func confEmailValidatorTmplBytes() ([]byte, error) {
	return bindataRead(
		_confEmailValidatorTmpl,
		"conf/email/validator.tmpl",
	)
}

func confEmailValidatorTmpl() (*asset, error) {
	bytes, err := confEmailValidatorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/email/validator.tmpl", size: 119, mode: os.FileMode(420), modTime: time.Unix(1605668786, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/email/register.tmpl":  confEmailRegisterTmpl,
	"conf/email/validator.tmpl": confEmailValidatorTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"email": &bintree{nil, map[string]*bintree{
			"register.tmpl":  &bintree{confEmailRegisterTmpl, map[string]*bintree{}},
			"validator.tmpl": &bintree{confEmailValidatorTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
