// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package conf generated by go-bindata.// sources:
// app.ini
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5f\x73\x12\xd7\x1b\xbe\x3f\x9f\xe2\x95\xdf\xdd\x6f\x6c\x8c\x65\xaa\x56\x86\x99\x22\xa0\x66\x0a\x2c\x65\x71\xac\x93\x71\x18\xfe\xac\x84\x71\x71\x71\x77\xb1\x93\x3b\x48\x93\x28\x96\x15\xac\xd4\x84\x84\x84\x64\x6a\x22\x6a\x65\x63\x2f\x12\xfe\x96\x0f\xe3\x9e\xdd\xe5\x2a\x5f\xa1\x73\xf6\x00\x25\x4d\x9a\xe9\x74\x72\x73\x72\xf6\x79\x9f\xf7\x79\x9f\xf7\xe1\xfc\x0f\x2e\x5c\xb8\x00\xfa\x41\xcb\x1c\xd4\xb4\x96\x62\xee\xe7\xb5\x41\x53\xaf\xb4\xcd\x41\x55\x6b\xbd\xd7\x5f\x3f\xd5\xba\x87\x04\x82\x28\xd0\x54\x8f\x70\xad\x61\x6c\xb6\x70\xa7\x62\x6c\x2c\x9b\x4f\xdf\xe3\xe6\x86\xd6\x2e\x0c\x57\x14\xa3\xdf\xa4\x70\xad\xf5\xd1\x1c\x6c\x9a\xbb\x45\xca\x64\x55\x23\x07\x98\x83\xaa\xbe\xae\x1a\x1f\xaa\xc6\x52\x1b\x97\x15\xe3\xed\x01\x0a\xb8\xfc\x5e\x70\x82\xdf\xe3\xe6\xb3\xb1\x5b\x02\x72\x80\x87\x8b\x65\x93\xa0\x37\x76\x71\xaf\x74\xdc\x2b\x0e\xbb\xeb\x66\xf3\x0d\xee\xe5\x70\x59\x45\x1e\xef\x8d\x3b\xb7\xc0\x09\xb2\x98\xe5\x10\x9a\x97\x38\xf1\x09\x27\xde\x47\x0e\xd0\xd7\x55\x5c\xde\xa7\x28\x58\x90\xe5\x8c\x84\x6e\x87\xc3\x41\x36\xe2\x0d\xb8\x6e\xf8\x48\x87\x07\x51\x5e\xe2\x90\x03\xc8\x35\xb0\x56\x21\x18\x1b\xcb\xc6\xe6\x4b\x5c\xfe\x0d\xd7\x0e\xf0\x56\xce\x2a\x89\xb8\x3c\x9e\x10\x38\x61\x76\xc6\xfa\xfb\xa7\x0a\xe3\x83\x8a\x4b\xbf\xd2\x8a\x20\x13\x0a\x83\x13\xae\xcd\x5e\x1b\xc3\xd9\x31\xde\x54\xf3\x5a\x7b\x9f\x9a\x62\x1e\xa9\xf8\x8f\xe5\xe3\x5e\x51\xeb\xae\x4c\x2b\x05\x7d\xed\x50\x2f\x28\x5a\x6f\x43\xeb\x0f\x8c\x4a\x03\xb9\xbd\xa1\x70\xe4\xe6\x9c\x25\x3b\x9e\x95\x64\x21\x7d\xc9\x02\x5e\x8a\x73\xa2\x3c\x93\xe1\xd2\xe8\x5b\xef\xbd\x33\x01\x0f\xb9\x45\xeb\xfb\x48\xb4\x79\xd4\xc0\xf5\x3a\x5d\xcc\xc4\x4a\x7d\x5d\x85\xff\x83\x5e\xc8\xe9\xb5\x02\xae\xd7\x71\x59\x19\xfe\xd8\xc7\x25\x55\xeb\xee\x51\x3c\x72\xb9\xdd\x5e\x96\x8d\xb8\x99\x40\x38\xc4\xf8\x22\x2e\x9f\x8f\xb9\x1b\x61\x42\x73\xb7\xe6\x02\xe0\x44\x68\x9e\x17\x92\xc4\x73\x5e\x48\x02\x9d\x0c\x7f\x5c\xc7\x4b\x8d\xc9\x7c\xb4\x8f\xf1\xae\xa3\xb5\x14\xbc\x5a\x45\x0e\xc0\xfb\x4b\xfa\x76\x8d\xec\x7e\xb3\x85\xd5\xf6\x04\x89\x0f\x56\xb5\xee\x1e\xfc\x20\x88\x0f\x21\x13\x95\x17\x40\x6b\x75\x48\x9a\xfa\x0a\x0a\x31\x4c\x38\x12\x74\x85\x6f\x5b\x2d\x13\x51\x39\x1a\x8b\x4a\x9c\xb5\xeb\x5f\x0e\x74\xa5\x89\x3b\xaf\xf4\x8a\xaa\x17\xf3\x60\xcb\x08\x92\x9c\x14\x39\xc9\xf6\x39\x97\xb7\xa5\x17\xa5\xc7\xbc\x75\x92\x1e\xf3\x29\x99\xb3\xd3\x5b\x89\xdc\x82\xfe\xec\xb5\x99\x5b\x01\x9b\x9c\x4a\xc4\x6c\x44\x57\xff\x95\xb1\x7c\xa8\xf5\x77\xb4\x76\x9d\x5a\x40\x57\x00\xfe\x7b\xec\x77\x3e\xc0\x4a\xc9\x6c\x36\xf5\xad\x3d\x73\xb0\xad\xbf\xd8\x83\xf0\x9c\xe7\x06\x0a\xdf\x0b\x12\xdf\xad\x3e\xd3\x6a\x28\x66\x9c\x24\x86\x25\x91\xb8\xfc\xe5\x55\x2b\x46\x97\xaf\xdb\xed\xb3\x57\xa6\xd1\x27\xe3\x9f\x4e\xc4\xf9\x6c\x2c\x29\x9c\xe6\x33\x2a\x0d\xfd\xd9\x11\x2e\x2b\xe8\x0e\xeb\x0d\x9d\x0b\xc5\xea\xaa\xb1\x93\x47\x41\x17\xcb\xde\x65\x42\x1e\x70\x22\x07\x68\xdd\x15\xa3\xd2\xd0\x3a\x2f\xa6\x5c\x3a\xee\x15\xc7\xce\x25\x52\x52\x34\xc6\x73\x96\x45\x22\xf7\x38\x9b\x12\x39\x1b\xe0\x9f\x8b\x60\x7b\xc2\x89\xa9\x07\x8b\x5f\x3c\xc8\xf2\xbc\x0d\xb1\xac\x2f\xe2\x67\x3c\x44\xe9\xa8\xe2\x24\xf5\xd8\x69\xa0\x41\xa0\xba\x68\x34\x8e\x7b\x45\x53\x3d\x32\x76\x9b\xda\x60\x8b\x7a\x6b\x74\xb7\x26\x11\xf8\x9c\x5b\x42\x74\xc7\x40\x36\x7c\x69\x3c\xdc\x4c\x22\x76\x7a\x3e\xfd\xd3\x8e\x5e\xcb\xe1\x37\x6f\x29\x8f\xd6\x7a\x3e\xac\x96\x91\xdf\xf5\x7d\x84\x09\x7a\x03\x24\xae\x01\x16\x9c\x60\x9f\x3d\xa7\xd4\x78\xd7\x19\xae\xfd\x3e\x55\x3a\xe7\xf1\x79\xa7\x4b\xd1\x7c\x3c\x1a\x5f\xb0\x72\x66\xf4\x5e\x91\x79\xac\x91\x70\xb5\x31\xf6\x4c\xe4\x12\xa9\x51\xd4\xb8\xb4\x05\x4e\x58\xff\x65\x12\x82\x6d\x1c\x0e\x0b\x33\xa1\x38\x3f\x19\x57\xec\x57\xbf\x26\x51\xa4\x7d\xea\x75\xfa\x40\x50\x0a\x18\xbd\x08\x24\x26\x6c\xd0\xe5\x26\xdc\x67\x8c\x77\x32\x24\x34\x53\xff\x26\x1f\x68\x9e\x4b\x47\x53\x3c\x19\xd6\x3a\x00\x2e\xbd\x1c\xe6\xf2\x7a\x4d\xc1\xcf\x77\x71\xb5\x61\x7c\xea\xe2\xed\x9f\xc8\xef\xb4\xa4\x0e\x73\x85\x79\x29\x2d\x67\x2e\x42\x46\xc8\xd8\x2f\x42\x2a\x1d\xcd\xdc\x3f\xee\x15\x8d\xcd\x26\x2e\x28\x44\x31\xf9\x0a\xb8\xa4\x12\xc1\x23\x1f\xc8\xd5\x84\x7c\x42\x7b\x96\x1f\x04\x39\x43\x60\xc9\xec\xa3\x19\x41\x4c\x5e\xff\xea\xda\xd5\xbf\xcb\x5a\x3b\x34\x36\x96\xe1\x66\x88\xf1\xc3\xa8\xd8\x3a\x3b\xe1\x91\x20\x72\x19\x7e\xf1\x9b\x49\x7c\x78\x21\x1e\xe5\x17\x04\x49\x3e\xdd\xdc\xa8\x76\x87\xd5\x55\xea\xd8\x94\x5d\xff\x81\xe3\x2c\x3f\x25\x59\x10\xa3\x49\xfa\x4c\x4d\x3d\x8d\x13\x2f\xc7\xc6\x58\xe4\x7f\xe1\x69\xb3\xfb\xe8\x4e\xc8\x07\x4e\xf4\x67\x00\x00\x00\xff\xff\x45\x09\xd9\x32\x91\x07\x00\x00"

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 1937, mode: os.FileMode(420), modTime: time.Unix(1607479340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
